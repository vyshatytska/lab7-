using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lab7
{
    class Matrix
    {
        private int K;
        private int N;
        private int[,] mat;
        private static int j;

        public Matrix()
        {
            this.K = 0;
            this.N = 0;
            this.mat = new int[K, N];
        }
        public Matrix(int k, int n)
        {
            if (k > 0 && n > 0)
            {
                this.K = k;
                this.N = n;

                this.mat = new int[K, N];
                for (int i = 0; i < K; i++)
                {
                    for (int j = 0; j < N; j++)
                    { mat[i, j] = 0; }
                }
            }
        }
        public static Matrix Create()
        {
            int k = 0, n = 0;
            do
            {
                Console.WriteLine("Please, input number of lines:");
                k = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("Please, input number of rows:");
                n = Convert.ToInt32(Console.ReadLine());
            } while (!(k > 0 && n > 0));
            return new Matrix(k, n);
        }
        public void Fill()
        {
            for (int i = 0; i < K; i++)
            {
                for (int j = 0; j < N; j++)

                {
                    Console.WriteLine("Input number in line {0} in row {1}", i + 1, j + 1);
                    this.mat[i, j] = Convert.ToInt32(Console.ReadLine());
                }
            }
        }
        public void Display()
        {
            for (int i = 0; i < K; i++)
            {
                for (int j = 0; j < N; j++)
                { Console.Write("{0} ", mat[i, j]); }
                Console.WriteLine();
            }
        }
      
        static double[,] Scalar(double[,] inputMartix, double k)
        {
            var resultMatrix = new double[j, (int)k];

            for (int i = 0; i < j; i++)
            {
                for (var j = 0; j < k; j++)
                {
                    resultMatrix[i, j] = inputMartix[i, j] * k;
                }
            }

            return resultMatrix;
        }

        public static bool
        operator ==(Matrix a, Matrix b)
        {
            if (a.N == b.N && a.K == b.K)
            {
                for (int i = 0; i < a.K; i++)
                {
                    for (int j = 0; j < a.N; j++)
                    {
                        if (a.mat[i, j] != b.mat[i, j])

                        { return false; }

                    }
                }
                return true;
            }
            else
            { return false; }
        }
        public static bool
        operator !=(Matrix a, Matrix b)
        {
            if (a.N == b.N && a.K == b.K)
            {
                for (int i = 0; i < a.K; i++)
                {
                    for (int j = 0; j < a.N; j++)
                    {
                        if (a.mat[i, j] != b.mat[i, j])
                        { return true; }
                    }
                }
                return false;
            }
            else
            { return true; }
        }
        public double Norm()
        {
            double norm = 0;
            for (int k = 0; k < K; k++)//cols
            {
                int max = Math.Abs(K);
                for (int j = 1; j < N; j++)//rows
                {
                    if (max < Math.Abs(K))
                        max = Math.Abs(K); 
                }
                norm += max;
            }
            return norm;
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lab7
{
    /*Описати клас, який представляє матрицю із N*N цілих чисел.
   Реалізувати операції
• множення матриці на скаляр;
• порівняння матриць;
• обчислення норми матриць(модуль різниці максимального та мінімального
елементів).*/
    internal class Program
    {
        static void Main(string[] args)
        {
            Matrix a = Matrix.Create();
            a.Fill();
            a.Display();
            Matrix b = Matrix.Create();
            b.Fill();
            b.Display();
            //var result = Scalar(N, K);
            //Console.WriteLine("Результат множення матриці M на число k:");
            //result.Display();
            Console.WriteLine("scalar:1 ");
            var z = a  ;
            z.Display();
            Console.WriteLine("\na == b: {0}\n", a == b);
            Console.WriteLine("\na != b: {0}\n", a != b);
            Console.WriteLine("Matrix norm from matrix a: {0}", a.Norm());
        }
    }
}


